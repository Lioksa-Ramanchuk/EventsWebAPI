//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Events.Domain.Resources {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ExceptionMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Events.Domain.Resources.ExceptionMessages", typeof(ExceptionMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The access token is missing..
        /// </summary>
        public static string AccessTokenMissing {
            get {
                return ResourceManager.GetString("AccessTokenMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The role with ID {roleId} is already assigned to the account with ID {accountId}..
        /// </summary>
        public static string AccountRoleWithKeyAlreadyAssigned {
            get {
                return ResourceManager.GetString("AccountRoleWithKeyAlreadyAssigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The role with ID {roleId} is not assigned to the account with ID {accountId}..
        /// </summary>
        public static string AccountRoleWithKeyNotAssigned {
            get {
                return ResourceManager.GetString("AccountRoleWithKeyNotAssigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No role with ID {roleId} assigned to the account with ID {accountId} was found..
        /// </summary>
        public static string AccountRoleWithKeyNotFound {
            get {
                return ResourceManager.GetString("AccountRoleWithKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No account with ID {accountId} was found..
        /// </summary>
        public static string AccountWithIdNotFound {
            get {
                return ResourceManager.GetString("AccountWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An account with username &quot;{accountUsername}&quot; already exists..
        /// </summary>
        public static string AccountWithUsernameAlreadyExists {
            get {
                return ResourceManager.GetString("AccountWithUsernameAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The username or password is incorrect..
        /// </summary>
        public static string BadCredentials {
            get {
                return ResourceManager.GetString("BadCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No event with the given search criteria was found..
        /// </summary>
        public static string EventBySearchNotFound {
            get {
                return ResourceManager.GetString("EventBySearchNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The participant with ID {accountId} is already registered for the event with ID {eventId}..
        /// </summary>
        public static string EventParticipantWithKeyAlreadyRegistered {
            get {
                return ResourceManager.GetString("EventParticipantWithKeyAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No participant with ID {participantId} registered for the event with ID {eventId} was found..
        /// </summary>
        public static string EventParticipantWithKeyNotFound {
            get {
                return ResourceManager.GetString("EventParticipantWithKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The participant with ID {participantId} is not registered for the event with ID {eventId}..
        /// </summary>
        public static string EventParticipantWithKeyNotRegistered {
            get {
                return ResourceManager.GetString("EventParticipantWithKeyNotRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot register more participants for the event with ID {eventId}: maximum participants limit of {eventMaxParticipantsCount} has been reached..
        /// </summary>
        public static string EventWithIdMaxParticipantsWithValueReached {
            get {
                return ResourceManager.GetString("EventWithIdMaxParticipantsWithValueReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No event with ID {eventId} was found..
        /// </summary>
        public static string EventWithIdNotFound {
            get {
                return ResourceManager.GetString("EventWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An event with title &quot;{eventTitle}&quot; already exists..
        /// </summary>
        public static string EventWithTitleAlreadyExists {
            get {
                return ResourceManager.GetString("EventWithTitleAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на HttpContext is not available..
        /// </summary>
        public static string HttpContextNotAvailable {
            get {
                return ResourceManager.GetString("HttpContextNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No image &apos;{imageFileName}&apos; was found..
        /// </summary>
        public static string ImageWithFileNameNotFound {
            get {
                return ResourceManager.GetString("ImageWithFileNameNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file has invalid content type: &apos;{fileContentType}&apos;. Only image files are allowed..
        /// </summary>
        public static string InvalidImageFileContentTypeWithValue {
            get {
                return ResourceManager.GetString("InvalidImageFileContentTypeWithValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The file has an invalid extension: &apos;{fileExtension}&apos;. Only image files are allowed..
        /// </summary>
        public static string InvalidImageFileExtensionWithValue {
            get {
                return ResourceManager.GetString("InvalidImageFileExtensionWithValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The token is invalid..
        /// </summary>
        public static string InvalidToken {
            get {
                return ResourceManager.GetString("InvalidToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The token is invalid: the name identifier claim is invalid..
        /// </summary>
        public static string InvalidTokenIdClaimInvalid {
            get {
                return ResourceManager.GetString("InvalidTokenIdClaimInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The token is invalid: the name identifier claim is missing..
        /// </summary>
        public static string InvalidTokenIdClaimMissing {
            get {
                return ResourceManager.GetString("InvalidTokenIdClaimMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot revoke the administrator role with ID {roleId} from the last administrator account with ID {accountId}..
        /// </summary>
        public static string LastAdministratorRoleWithKeyRevocation {
            get {
                return ResourceManager.GetString("LastAdministratorRoleWithKeyRevocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cannot remove the last administrator account with ID {accountId}. At least one administrator account must remain..
        /// </summary>
        public static string LastAdministratorWithIdRemoval {
            get {
                return ResourceManager.GetString("LastAdministratorWithIdRemoval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No file was uploaded..
        /// </summary>
        public static string NoFileUploaded {
            get {
                return ResourceManager.GetString("NoFileUploaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No notification with ID {notificationId} was found..
        /// </summary>
        public static string NotificationWithIdNotFound {
            get {
                return ResourceManager.GetString("NotificationWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No notification with ID {notificationId} sent to the account with ID {accountId} was found..
        /// </summary>
        public static string NotificationWithIdNotSentToAccountWithId {
            get {
                return ResourceManager.GetString("NotificationWithIdNotSentToAccountWithId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No participant with ID {participantId} was found..
        /// </summary>
        public static string ParticipantWithIdNotFound {
            get {
                return ResourceManager.GetString("ParticipantWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The refresh token is missing..
        /// </summary>
        public static string RefreshTokenMissing {
            get {
                return ResourceManager.GetString("RefreshTokenMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The refresh token stored for the account with ID {accountId} has expired..
        /// </summary>
        public static string RefreshTokenStoredForAccountWithIdExpired {
            get {
                return ResourceManager.GetString("RefreshTokenStoredForAccountWithIdExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No refresh token stored for the account with ID {accountId} was found..
        /// </summary>
        public static string RefreshTokenStoredForAccountWithIdNotFound {
            get {
                return ResourceManager.GetString("RefreshTokenStoredForAccountWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No role with ID {roleId} was found..
        /// </summary>
        public static string RoleWithIdNotFound {
            get {
                return ResourceManager.GetString("RoleWithIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No role with title &apos;{roleTitle}&apos; was found..
        /// </summary>
        public static string RoleWithTitleNotFound {
            get {
                return ResourceManager.GetString("RoleWithTitleNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The database context transaction is already in use..
        /// </summary>
        public static string TransactionAlreadyInUse {
            get {
                return ResourceManager.GetString("TransactionAlreadyInUse", resourceCulture);
            }
        }
    }
}
